// This file was generated by counterfeiter
package cffakes

import (
	"sync"

	"github.build.ge.com/adoption/predix-cli/cli/cf"
)

type FakeCacheInterface struct {
	InitStub        func(cache cf.CacheType) (cacheDir string)
	initMutex       sync.RWMutex
	initArgsForCall []struct {
		cache cf.CacheType
	}
	initReturns struct {
		result1 string
	}
	InitForOrgStub        func(cache cf.CacheType, org string) (cacheDir string)
	initForOrgMutex       sync.RWMutex
	initForOrgArgsForCall []struct {
		cache cf.CacheType
		org   string
	}
	initForOrgReturns struct {
		result1 string
	}
	WriteStub        func(cache cf.CacheType, items []cf.Item)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		cache cf.CacheType
		items []cf.Item
	}
	WriteForOrgStub        func(cache cf.CacheType, items []cf.Item, org string)
	writeForOrgMutex       sync.RWMutex
	writeForOrgArgsForCall []struct {
		cache cf.CacheType
		items []cf.Item
		org   string
	}
	InvalidateStub        func(cache cf.CacheType)
	invalidateMutex       sync.RWMutex
	invalidateArgsForCall []struct {
		cache cf.CacheType
	}
	InvalidateForOrgStub        func(cache cf.CacheType, org string)
	invalidateForOrgMutex       sync.RWMutex
	invalidateForOrgArgsForCall []struct {
		cache cf.CacheType
		org   string
	}
	InvalidateTypeStub        func(cache cf.CacheType)
	invalidateTypeMutex       sync.RWMutex
	invalidateTypeArgsForCall []struct {
		cache cf.CacheType
	}
	PurgeCurrentStub                      func()
	purgeCurrentMutex                     sync.RWMutex
	purgeCurrentArgsForCall               []struct{}
	PurgeAllStub                          func()
	purgeAllMutex                         sync.RWMutex
	purgeAllArgsForCall                   []struct{}
	InvalidateOrgsStub                    func()
	invalidateOrgsMutex                   sync.RWMutex
	invalidateOrgsArgsForCall             []struct{}
	InvalidateSpacesStub                  func()
	invalidateSpacesMutex                 sync.RWMutex
	invalidateSpacesArgsForCall           []struct{}
	InvalidateStacksStub                  func()
	invalidateStacksMutex                 sync.RWMutex
	invalidateStacksArgsForCall           []struct{}
	InvalidateServiceInstancesStub        func()
	invalidateServiceInstancesMutex       sync.RWMutex
	invalidateServiceInstancesArgsForCall []struct{}
	InvalidateAppsStub                    func()
	invalidateAppsMutex                   sync.RWMutex
	invalidateAppsArgsForCall             []struct{}
	invocations                           map[string][][]interface{}
	invocationsMutex                      sync.RWMutex
}

func (fake *FakeCacheInterface) Init(cache cf.CacheType) (cacheDir string) {
	fake.initMutex.Lock()
	fake.initArgsForCall = append(fake.initArgsForCall, struct {
		cache cf.CacheType
	}{cache})
	fake.recordInvocation("Init", []interface{}{cache})
	fake.initMutex.Unlock()
	if fake.InitStub != nil {
		return fake.InitStub(cache)
	} else {
		return fake.initReturns.result1
	}
}

func (fake *FakeCacheInterface) InitCallCount() int {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return len(fake.initArgsForCall)
}

func (fake *FakeCacheInterface) InitArgsForCall(i int) cf.CacheType {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return fake.initArgsForCall[i].cache
}

func (fake *FakeCacheInterface) InitReturns(result1 string) {
	fake.InitStub = nil
	fake.initReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCacheInterface) InitForOrg(cache cf.CacheType, org string) (cacheDir string) {
	fake.initForOrgMutex.Lock()
	fake.initForOrgArgsForCall = append(fake.initForOrgArgsForCall, struct {
		cache cf.CacheType
		org   string
	}{cache, org})
	fake.recordInvocation("InitForOrg", []interface{}{cache, org})
	fake.initForOrgMutex.Unlock()
	if fake.InitForOrgStub != nil {
		return fake.InitForOrgStub(cache, org)
	} else {
		return fake.initForOrgReturns.result1
	}
}

func (fake *FakeCacheInterface) InitForOrgCallCount() int {
	fake.initForOrgMutex.RLock()
	defer fake.initForOrgMutex.RUnlock()
	return len(fake.initForOrgArgsForCall)
}

func (fake *FakeCacheInterface) InitForOrgArgsForCall(i int) (cf.CacheType, string) {
	fake.initForOrgMutex.RLock()
	defer fake.initForOrgMutex.RUnlock()
	return fake.initForOrgArgsForCall[i].cache, fake.initForOrgArgsForCall[i].org
}

func (fake *FakeCacheInterface) InitForOrgReturns(result1 string) {
	fake.InitForOrgStub = nil
	fake.initForOrgReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCacheInterface) Write(cache cf.CacheType, items []cf.Item) {
	var itemsCopy []cf.Item
	if items != nil {
		itemsCopy = make([]cf.Item, len(items))
		copy(itemsCopy, items)
	}
	fake.writeMutex.Lock()
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		cache cf.CacheType
		items []cf.Item
	}{cache, itemsCopy})
	fake.recordInvocation("Write", []interface{}{cache, itemsCopy})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		fake.WriteStub(cache, items)
	}
}

func (fake *FakeCacheInterface) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeCacheInterface) WriteArgsForCall(i int) (cf.CacheType, []cf.Item) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].cache, fake.writeArgsForCall[i].items
}

func (fake *FakeCacheInterface) WriteForOrg(cache cf.CacheType, items []cf.Item, org string) {
	var itemsCopy []cf.Item
	if items != nil {
		itemsCopy = make([]cf.Item, len(items))
		copy(itemsCopy, items)
	}
	fake.writeForOrgMutex.Lock()
	fake.writeForOrgArgsForCall = append(fake.writeForOrgArgsForCall, struct {
		cache cf.CacheType
		items []cf.Item
		org   string
	}{cache, itemsCopy, org})
	fake.recordInvocation("WriteForOrg", []interface{}{cache, itemsCopy, org})
	fake.writeForOrgMutex.Unlock()
	if fake.WriteForOrgStub != nil {
		fake.WriteForOrgStub(cache, items, org)
	}
}

func (fake *FakeCacheInterface) WriteForOrgCallCount() int {
	fake.writeForOrgMutex.RLock()
	defer fake.writeForOrgMutex.RUnlock()
	return len(fake.writeForOrgArgsForCall)
}

func (fake *FakeCacheInterface) WriteForOrgArgsForCall(i int) (cf.CacheType, []cf.Item, string) {
	fake.writeForOrgMutex.RLock()
	defer fake.writeForOrgMutex.RUnlock()
	return fake.writeForOrgArgsForCall[i].cache, fake.writeForOrgArgsForCall[i].items, fake.writeForOrgArgsForCall[i].org
}

func (fake *FakeCacheInterface) Invalidate(cache cf.CacheType) {
	fake.invalidateMutex.Lock()
	fake.invalidateArgsForCall = append(fake.invalidateArgsForCall, struct {
		cache cf.CacheType
	}{cache})
	fake.recordInvocation("Invalidate", []interface{}{cache})
	fake.invalidateMutex.Unlock()
	if fake.InvalidateStub != nil {
		fake.InvalidateStub(cache)
	}
}

func (fake *FakeCacheInterface) InvalidateCallCount() int {
	fake.invalidateMutex.RLock()
	defer fake.invalidateMutex.RUnlock()
	return len(fake.invalidateArgsForCall)
}

func (fake *FakeCacheInterface) InvalidateArgsForCall(i int) cf.CacheType {
	fake.invalidateMutex.RLock()
	defer fake.invalidateMutex.RUnlock()
	return fake.invalidateArgsForCall[i].cache
}

func (fake *FakeCacheInterface) InvalidateForOrg(cache cf.CacheType, org string) {
	fake.invalidateForOrgMutex.Lock()
	fake.invalidateForOrgArgsForCall = append(fake.invalidateForOrgArgsForCall, struct {
		cache cf.CacheType
		org   string
	}{cache, org})
	fake.recordInvocation("InvalidateForOrg", []interface{}{cache, org})
	fake.invalidateForOrgMutex.Unlock()
	if fake.InvalidateForOrgStub != nil {
		fake.InvalidateForOrgStub(cache, org)
	}
}

func (fake *FakeCacheInterface) InvalidateForOrgCallCount() int {
	fake.invalidateForOrgMutex.RLock()
	defer fake.invalidateForOrgMutex.RUnlock()
	return len(fake.invalidateForOrgArgsForCall)
}

func (fake *FakeCacheInterface) InvalidateForOrgArgsForCall(i int) (cf.CacheType, string) {
	fake.invalidateForOrgMutex.RLock()
	defer fake.invalidateForOrgMutex.RUnlock()
	return fake.invalidateForOrgArgsForCall[i].cache, fake.invalidateForOrgArgsForCall[i].org
}

func (fake *FakeCacheInterface) InvalidateType(cache cf.CacheType) {
	fake.invalidateTypeMutex.Lock()
	fake.invalidateTypeArgsForCall = append(fake.invalidateTypeArgsForCall, struct {
		cache cf.CacheType
	}{cache})
	fake.recordInvocation("InvalidateType", []interface{}{cache})
	fake.invalidateTypeMutex.Unlock()
	if fake.InvalidateTypeStub != nil {
		fake.InvalidateTypeStub(cache)
	}
}

func (fake *FakeCacheInterface) InvalidateTypeCallCount() int {
	fake.invalidateTypeMutex.RLock()
	defer fake.invalidateTypeMutex.RUnlock()
	return len(fake.invalidateTypeArgsForCall)
}

func (fake *FakeCacheInterface) InvalidateTypeArgsForCall(i int) cf.CacheType {
	fake.invalidateTypeMutex.RLock()
	defer fake.invalidateTypeMutex.RUnlock()
	return fake.invalidateTypeArgsForCall[i].cache
}

func (fake *FakeCacheInterface) PurgeCurrent() {
	fake.purgeCurrentMutex.Lock()
	fake.purgeCurrentArgsForCall = append(fake.purgeCurrentArgsForCall, struct{}{})
	fake.recordInvocation("PurgeCurrent", []interface{}{})
	fake.purgeCurrentMutex.Unlock()
	if fake.PurgeCurrentStub != nil {
		fake.PurgeCurrentStub()
	}
}

func (fake *FakeCacheInterface) PurgeCurrentCallCount() int {
	fake.purgeCurrentMutex.RLock()
	defer fake.purgeCurrentMutex.RUnlock()
	return len(fake.purgeCurrentArgsForCall)
}

func (fake *FakeCacheInterface) PurgeAll() {
	fake.purgeAllMutex.Lock()
	fake.purgeAllArgsForCall = append(fake.purgeAllArgsForCall, struct{}{})
	fake.recordInvocation("PurgeAll", []interface{}{})
	fake.purgeAllMutex.Unlock()
	if fake.PurgeAllStub != nil {
		fake.PurgeAllStub()
	}
}

func (fake *FakeCacheInterface) PurgeAllCallCount() int {
	fake.purgeAllMutex.RLock()
	defer fake.purgeAllMutex.RUnlock()
	return len(fake.purgeAllArgsForCall)
}

func (fake *FakeCacheInterface) InvalidateOrgs() {
	fake.invalidateOrgsMutex.Lock()
	fake.invalidateOrgsArgsForCall = append(fake.invalidateOrgsArgsForCall, struct{}{})
	fake.recordInvocation("InvalidateOrgs", []interface{}{})
	fake.invalidateOrgsMutex.Unlock()
	if fake.InvalidateOrgsStub != nil {
		fake.InvalidateOrgsStub()
	}
}

func (fake *FakeCacheInterface) InvalidateOrgsCallCount() int {
	fake.invalidateOrgsMutex.RLock()
	defer fake.invalidateOrgsMutex.RUnlock()
	return len(fake.invalidateOrgsArgsForCall)
}

func (fake *FakeCacheInterface) InvalidateSpaces() {
	fake.invalidateSpacesMutex.Lock()
	fake.invalidateSpacesArgsForCall = append(fake.invalidateSpacesArgsForCall, struct{}{})
	fake.recordInvocation("InvalidateSpaces", []interface{}{})
	fake.invalidateSpacesMutex.Unlock()
	if fake.InvalidateSpacesStub != nil {
		fake.InvalidateSpacesStub()
	}
}

func (fake *FakeCacheInterface) InvalidateSpacesCallCount() int {
	fake.invalidateSpacesMutex.RLock()
	defer fake.invalidateSpacesMutex.RUnlock()
	return len(fake.invalidateSpacesArgsForCall)
}

func (fake *FakeCacheInterface) InvalidateStacks() {
	fake.invalidateStacksMutex.Lock()
	fake.invalidateStacksArgsForCall = append(fake.invalidateStacksArgsForCall, struct{}{})
	fake.recordInvocation("InvalidateStacks", []interface{}{})
	fake.invalidateStacksMutex.Unlock()
	if fake.InvalidateStacksStub != nil {
		fake.InvalidateStacksStub()
	}
}

func (fake *FakeCacheInterface) InvalidateStacksCallCount() int {
	fake.invalidateStacksMutex.RLock()
	defer fake.invalidateStacksMutex.RUnlock()
	return len(fake.invalidateStacksArgsForCall)
}

func (fake *FakeCacheInterface) InvalidateServiceInstances() {
	fake.invalidateServiceInstancesMutex.Lock()
	fake.invalidateServiceInstancesArgsForCall = append(fake.invalidateServiceInstancesArgsForCall, struct{}{})
	fake.recordInvocation("InvalidateServiceInstances", []interface{}{})
	fake.invalidateServiceInstancesMutex.Unlock()
	if fake.InvalidateServiceInstancesStub != nil {
		fake.InvalidateServiceInstancesStub()
	}
}

func (fake *FakeCacheInterface) InvalidateServiceInstancesCallCount() int {
	fake.invalidateServiceInstancesMutex.RLock()
	defer fake.invalidateServiceInstancesMutex.RUnlock()
	return len(fake.invalidateServiceInstancesArgsForCall)
}

func (fake *FakeCacheInterface) InvalidateApps() {
	fake.invalidateAppsMutex.Lock()
	fake.invalidateAppsArgsForCall = append(fake.invalidateAppsArgsForCall, struct{}{})
	fake.recordInvocation("InvalidateApps", []interface{}{})
	fake.invalidateAppsMutex.Unlock()
	if fake.InvalidateAppsStub != nil {
		fake.InvalidateAppsStub()
	}
}

func (fake *FakeCacheInterface) InvalidateAppsCallCount() int {
	fake.invalidateAppsMutex.RLock()
	defer fake.invalidateAppsMutex.RUnlock()
	return len(fake.invalidateAppsArgsForCall)
}

func (fake *FakeCacheInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	fake.initForOrgMutex.RLock()
	defer fake.initForOrgMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	fake.writeForOrgMutex.RLock()
	defer fake.writeForOrgMutex.RUnlock()
	fake.invalidateMutex.RLock()
	defer fake.invalidateMutex.RUnlock()
	fake.invalidateForOrgMutex.RLock()
	defer fake.invalidateForOrgMutex.RUnlock()
	fake.invalidateTypeMutex.RLock()
	defer fake.invalidateTypeMutex.RUnlock()
	fake.purgeCurrentMutex.RLock()
	defer fake.purgeCurrentMutex.RUnlock()
	fake.purgeAllMutex.RLock()
	defer fake.purgeAllMutex.RUnlock()
	fake.invalidateOrgsMutex.RLock()
	defer fake.invalidateOrgsMutex.RUnlock()
	fake.invalidateSpacesMutex.RLock()
	defer fake.invalidateSpacesMutex.RUnlock()
	fake.invalidateStacksMutex.RLock()
	defer fake.invalidateStacksMutex.RUnlock()
	fake.invalidateServiceInstancesMutex.RLock()
	defer fake.invalidateServiceInstancesMutex.RUnlock()
	fake.invalidateAppsMutex.RLock()
	defer fake.invalidateAppsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCacheInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf.CacheInterface = new(FakeCacheInterface)
