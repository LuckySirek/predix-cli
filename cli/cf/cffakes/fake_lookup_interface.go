// This file was generated by counterfeiter
package cffakes

import (
	"sync"

	"github.build.ge.com/adoption/predix-cli/cli/cf"
)

type FakeLookupInterface struct {
	OrgsStub        func() (orgs []string)
	orgsMutex       sync.RWMutex
	orgsArgsForCall []struct{}
	orgsReturns     struct {
		result1 []string
	}
	SpacesStub        func(params map[string]string) []string
	spacesMutex       sync.RWMutex
	spacesArgsForCall []struct {
		params map[string]string
	}
	spacesReturns struct {
		result1 []string
	}
	StacksStub        func() []string
	stacksMutex       sync.RWMutex
	stacksArgsForCall []struct{}
	stacksReturns     struct {
		result1 []string
	}
	MarketplaceServicesStub        func() []string
	marketplaceServicesMutex       sync.RWMutex
	marketplaceServicesArgsForCall []struct{}
	marketplaceServicesReturns     struct {
		result1 []string
	}
	MarketplaceServicePlansStub        func(serviceName string) []string
	marketplaceServicePlansMutex       sync.RWMutex
	marketplaceServicePlansArgsForCall []struct {
		serviceName string
	}
	marketplaceServicePlansReturns struct {
		result1 []string
	}
	ServiceInstancesStub        func() []string
	serviceInstancesMutex       sync.RWMutex
	serviceInstancesArgsForCall []struct{}
	serviceInstancesReturns     struct {
		result1 []string
	}
	AppsStub        func() []string
	appsMutex       sync.RWMutex
	appsArgsForCall []struct{}
	appsReturns     struct {
		result1 []string
	}
	MarketplaceServicePlansItemsStub        func(serviceName string) []cf.Item
	marketplaceServicePlansItemsMutex       sync.RWMutex
	marketplaceServicePlansItemsArgsForCall []struct {
		serviceName string
	}
	marketplaceServicePlansItemsReturns struct {
		result1 []cf.Item
	}
	MarketplaceServicePlanItemStub        func(serviceName string, planName string) *cf.Item
	marketplaceServicePlanItemMutex       sync.RWMutex
	marketplaceServicePlanItemArgsForCall []struct {
		serviceName string
		planName    string
	}
	marketplaceServicePlanItemReturns struct {
		result1 *cf.Item
	}
	InstancesForServiceStub        func(serviceName string) []string
	instancesForServiceMutex       sync.RWMutex
	instancesForServiceArgsForCall []struct {
		serviceName string
	}
	instancesForServiceReturns struct {
		result1 []string
	}
	InstancesItemsForServiceStub        func(serviceName string) []cf.Item
	instancesItemsForServiceMutex       sync.RWMutex
	instancesItemsForServiceArgsForCall []struct {
		serviceName string
	}
	instancesItemsForServiceReturns struct {
		result1 []cf.Item
	}
	InstanceForInstanceNameStub        func(serviceInstance string) (instance *cf.Item)
	instanceForInstanceNameMutex       sync.RWMutex
	instanceForInstanceNameArgsForCall []struct {
		serviceInstance string
	}
	instanceForInstanceNameReturns struct {
		result1 *cf.Item
	}
	AppForNameStub        func(appName string) (instance *cf.Item)
	appForNameMutex       sync.RWMutex
	appForNameArgsForCall []struct {
		appName string
	}
	appForNameReturns struct {
		result1 *cf.Item
	}
	PredixUaaInstancesStub        func() []string
	predixUaaInstancesMutex       sync.RWMutex
	predixUaaInstancesArgsForCall []struct{}
	predixUaaInstancesReturns     struct {
		result1 []string
	}
	PredixAssetInstancesStub        func() []string
	predixAssetInstancesMutex       sync.RWMutex
	predixAssetInstancesArgsForCall []struct{}
	predixAssetInstancesReturns     struct {
		result1 []string
	}
	PredixTimeseriesInstancesStub        func() []string
	predixTimeseriesInstancesMutex       sync.RWMutex
	predixTimeseriesInstancesArgsForCall []struct{}
	predixTimeseriesInstancesReturns     struct {
		result1 []string
	}
	PredixAnalyticsCatalogInstancesStub        func() []string
	predixAnalyticsCatalogInstancesMutex       sync.RWMutex
	predixAnalyticsCatalogInstancesArgsForCall []struct{}
	predixAnalyticsCatalogInstancesReturns     struct {
		result1 []string
	}
	PredixUaaInstanceItemStub        func(instanceName string) *cf.Item
	predixUaaInstanceItemMutex       sync.RWMutex
	predixUaaInstanceItemArgsForCall []struct {
		instanceName string
	}
	predixUaaInstanceItemReturns struct {
		result1 *cf.Item
	}
	ItemNamesStub        func(path string, cache cf.CacheType) []string
	itemNamesMutex       sync.RWMutex
	itemNamesArgsForCall []struct {
		path  string
		cache cf.CacheType
	}
	itemNamesReturns struct {
		result1 []string
	}
	ItemNamesForOrgStub        func(path string, cache cf.CacheType, org string) []string
	itemNamesForOrgMutex       sync.RWMutex
	itemNamesForOrgArgsForCall []struct {
		path  string
		cache cf.CacheType
		org   string
	}
	itemNamesForOrgReturns struct {
		result1 []string
	}
	ItemsStub        func(path string, cache cf.CacheType) []cf.Item
	itemsMutex       sync.RWMutex
	itemsArgsForCall []struct {
		path  string
		cache cf.CacheType
	}
	itemsReturns struct {
		result1 []cf.Item
	}
	ItemsForOrgStub        func(path string, cache cf.CacheType, org string) []cf.Item
	itemsForOrgMutex       sync.RWMutex
	itemsForOrgArgsForCall []struct {
		path  string
		cache cf.CacheType
		org   string
	}
	itemsForOrgReturns struct {
		result1 []cf.Item
	}
	NameFromItemsStub        func(cfItems []cf.Item) (items []string)
	nameFromItemsMutex       sync.RWMutex
	nameFromItemsArgsForCall []struct {
		cfItems []cf.Item
	}
	nameFromItemsReturns struct {
		result1 []string
	}
	InCacheStub        func(cache cf.CacheType) (items []cf.Item)
	inCacheMutex       sync.RWMutex
	inCacheArgsForCall []struct {
		cache cf.CacheType
	}
	inCacheReturns struct {
		result1 []cf.Item
	}
	InCacheForOrgStub        func(cache cf.CacheType, org string) (items []cf.Item)
	inCacheForOrgMutex       sync.RWMutex
	inCacheForOrgArgsForCall []struct {
		cache cf.CacheType
		org   string
	}
	inCacheForOrgReturns struct {
		result1 []cf.Item
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLookupInterface) Orgs() (orgs []string) {
	fake.orgsMutex.Lock()
	fake.orgsArgsForCall = append(fake.orgsArgsForCall, struct{}{})
	fake.recordInvocation("Orgs", []interface{}{})
	fake.orgsMutex.Unlock()
	if fake.OrgsStub != nil {
		return fake.OrgsStub()
	}
	return fake.orgsReturns.result1
}

func (fake *FakeLookupInterface) OrgsCallCount() int {
	fake.orgsMutex.RLock()
	defer fake.orgsMutex.RUnlock()
	return len(fake.orgsArgsForCall)
}

func (fake *FakeLookupInterface) OrgsReturns(result1 []string) {
	fake.OrgsStub = nil
	fake.orgsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) Spaces(params map[string]string) []string {
	fake.spacesMutex.Lock()
	fake.spacesArgsForCall = append(fake.spacesArgsForCall, struct {
		params map[string]string
	}{params})
	fake.recordInvocation("Spaces", []interface{}{params})
	fake.spacesMutex.Unlock()
	if fake.SpacesStub != nil {
		return fake.SpacesStub(params)
	}
	return fake.spacesReturns.result1
}

func (fake *FakeLookupInterface) SpacesCallCount() int {
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	return len(fake.spacesArgsForCall)
}

func (fake *FakeLookupInterface) SpacesArgsForCall(i int) map[string]string {
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	return fake.spacesArgsForCall[i].params
}

func (fake *FakeLookupInterface) SpacesReturns(result1 []string) {
	fake.SpacesStub = nil
	fake.spacesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) Stacks() []string {
	fake.stacksMutex.Lock()
	fake.stacksArgsForCall = append(fake.stacksArgsForCall, struct{}{})
	fake.recordInvocation("Stacks", []interface{}{})
	fake.stacksMutex.Unlock()
	if fake.StacksStub != nil {
		return fake.StacksStub()
	}
	return fake.stacksReturns.result1
}

func (fake *FakeLookupInterface) StacksCallCount() int {
	fake.stacksMutex.RLock()
	defer fake.stacksMutex.RUnlock()
	return len(fake.stacksArgsForCall)
}

func (fake *FakeLookupInterface) StacksReturns(result1 []string) {
	fake.StacksStub = nil
	fake.stacksReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) MarketplaceServices() []string {
	fake.marketplaceServicesMutex.Lock()
	fake.marketplaceServicesArgsForCall = append(fake.marketplaceServicesArgsForCall, struct{}{})
	fake.recordInvocation("MarketplaceServices", []interface{}{})
	fake.marketplaceServicesMutex.Unlock()
	if fake.MarketplaceServicesStub != nil {
		return fake.MarketplaceServicesStub()
	}
	return fake.marketplaceServicesReturns.result1
}

func (fake *FakeLookupInterface) MarketplaceServicesCallCount() int {
	fake.marketplaceServicesMutex.RLock()
	defer fake.marketplaceServicesMutex.RUnlock()
	return len(fake.marketplaceServicesArgsForCall)
}

func (fake *FakeLookupInterface) MarketplaceServicesReturns(result1 []string) {
	fake.MarketplaceServicesStub = nil
	fake.marketplaceServicesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) MarketplaceServicePlans(serviceName string) []string {
	fake.marketplaceServicePlansMutex.Lock()
	fake.marketplaceServicePlansArgsForCall = append(fake.marketplaceServicePlansArgsForCall, struct {
		serviceName string
	}{serviceName})
	fake.recordInvocation("MarketplaceServicePlans", []interface{}{serviceName})
	fake.marketplaceServicePlansMutex.Unlock()
	if fake.MarketplaceServicePlansStub != nil {
		return fake.MarketplaceServicePlansStub(serviceName)
	}
	return fake.marketplaceServicePlansReturns.result1
}

func (fake *FakeLookupInterface) MarketplaceServicePlansCallCount() int {
	fake.marketplaceServicePlansMutex.RLock()
	defer fake.marketplaceServicePlansMutex.RUnlock()
	return len(fake.marketplaceServicePlansArgsForCall)
}

func (fake *FakeLookupInterface) MarketplaceServicePlansArgsForCall(i int) string {
	fake.marketplaceServicePlansMutex.RLock()
	defer fake.marketplaceServicePlansMutex.RUnlock()
	return fake.marketplaceServicePlansArgsForCall[i].serviceName
}

func (fake *FakeLookupInterface) MarketplaceServicePlansReturns(result1 []string) {
	fake.MarketplaceServicePlansStub = nil
	fake.marketplaceServicePlansReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) ServiceInstances() []string {
	fake.serviceInstancesMutex.Lock()
	fake.serviceInstancesArgsForCall = append(fake.serviceInstancesArgsForCall, struct{}{})
	fake.recordInvocation("ServiceInstances", []interface{}{})
	fake.serviceInstancesMutex.Unlock()
	if fake.ServiceInstancesStub != nil {
		return fake.ServiceInstancesStub()
	}
	return fake.serviceInstancesReturns.result1
}

func (fake *FakeLookupInterface) ServiceInstancesCallCount() int {
	fake.serviceInstancesMutex.RLock()
	defer fake.serviceInstancesMutex.RUnlock()
	return len(fake.serviceInstancesArgsForCall)
}

func (fake *FakeLookupInterface) ServiceInstancesReturns(result1 []string) {
	fake.ServiceInstancesStub = nil
	fake.serviceInstancesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) Apps() []string {
	fake.appsMutex.Lock()
	fake.appsArgsForCall = append(fake.appsArgsForCall, struct{}{})
	fake.recordInvocation("Apps", []interface{}{})
	fake.appsMutex.Unlock()
	if fake.AppsStub != nil {
		return fake.AppsStub()
	}
	return fake.appsReturns.result1
}

func (fake *FakeLookupInterface) AppsCallCount() int {
	fake.appsMutex.RLock()
	defer fake.appsMutex.RUnlock()
	return len(fake.appsArgsForCall)
}

func (fake *FakeLookupInterface) AppsReturns(result1 []string) {
	fake.AppsStub = nil
	fake.appsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) MarketplaceServicePlansItems(serviceName string) []cf.Item {
	fake.marketplaceServicePlansItemsMutex.Lock()
	fake.marketplaceServicePlansItemsArgsForCall = append(fake.marketplaceServicePlansItemsArgsForCall, struct {
		serviceName string
	}{serviceName})
	fake.recordInvocation("MarketplaceServicePlansItems", []interface{}{serviceName})
	fake.marketplaceServicePlansItemsMutex.Unlock()
	if fake.MarketplaceServicePlansItemsStub != nil {
		return fake.MarketplaceServicePlansItemsStub(serviceName)
	}
	return fake.marketplaceServicePlansItemsReturns.result1
}

func (fake *FakeLookupInterface) MarketplaceServicePlansItemsCallCount() int {
	fake.marketplaceServicePlansItemsMutex.RLock()
	defer fake.marketplaceServicePlansItemsMutex.RUnlock()
	return len(fake.marketplaceServicePlansItemsArgsForCall)
}

func (fake *FakeLookupInterface) MarketplaceServicePlansItemsArgsForCall(i int) string {
	fake.marketplaceServicePlansItemsMutex.RLock()
	defer fake.marketplaceServicePlansItemsMutex.RUnlock()
	return fake.marketplaceServicePlansItemsArgsForCall[i].serviceName
}

func (fake *FakeLookupInterface) MarketplaceServicePlansItemsReturns(result1 []cf.Item) {
	fake.MarketplaceServicePlansItemsStub = nil
	fake.marketplaceServicePlansItemsReturns = struct {
		result1 []cf.Item
	}{result1}
}

func (fake *FakeLookupInterface) MarketplaceServicePlanItem(serviceName string, planName string) *cf.Item {
	fake.marketplaceServicePlanItemMutex.Lock()
	fake.marketplaceServicePlanItemArgsForCall = append(fake.marketplaceServicePlanItemArgsForCall, struct {
		serviceName string
		planName    string
	}{serviceName, planName})
	fake.recordInvocation("MarketplaceServicePlanItem", []interface{}{serviceName, planName})
	fake.marketplaceServicePlanItemMutex.Unlock()
	if fake.MarketplaceServicePlanItemStub != nil {
		return fake.MarketplaceServicePlanItemStub(serviceName, planName)
	}
	return fake.marketplaceServicePlanItemReturns.result1
}

func (fake *FakeLookupInterface) MarketplaceServicePlanItemCallCount() int {
	fake.marketplaceServicePlanItemMutex.RLock()
	defer fake.marketplaceServicePlanItemMutex.RUnlock()
	return len(fake.marketplaceServicePlanItemArgsForCall)
}

func (fake *FakeLookupInterface) MarketplaceServicePlanItemArgsForCall(i int) (string, string) {
	fake.marketplaceServicePlanItemMutex.RLock()
	defer fake.marketplaceServicePlanItemMutex.RUnlock()
	return fake.marketplaceServicePlanItemArgsForCall[i].serviceName, fake.marketplaceServicePlanItemArgsForCall[i].planName
}

func (fake *FakeLookupInterface) MarketplaceServicePlanItemReturns(result1 *cf.Item) {
	fake.MarketplaceServicePlanItemStub = nil
	fake.marketplaceServicePlanItemReturns = struct {
		result1 *cf.Item
	}{result1}
}

func (fake *FakeLookupInterface) InstancesForService(serviceName string) []string {
	fake.instancesForServiceMutex.Lock()
	fake.instancesForServiceArgsForCall = append(fake.instancesForServiceArgsForCall, struct {
		serviceName string
	}{serviceName})
	fake.recordInvocation("InstancesForService", []interface{}{serviceName})
	fake.instancesForServiceMutex.Unlock()
	if fake.InstancesForServiceStub != nil {
		return fake.InstancesForServiceStub(serviceName)
	}
	return fake.instancesForServiceReturns.result1
}

func (fake *FakeLookupInterface) InstancesForServiceCallCount() int {
	fake.instancesForServiceMutex.RLock()
	defer fake.instancesForServiceMutex.RUnlock()
	return len(fake.instancesForServiceArgsForCall)
}

func (fake *FakeLookupInterface) InstancesForServiceArgsForCall(i int) string {
	fake.instancesForServiceMutex.RLock()
	defer fake.instancesForServiceMutex.RUnlock()
	return fake.instancesForServiceArgsForCall[i].serviceName
}

func (fake *FakeLookupInterface) InstancesForServiceReturns(result1 []string) {
	fake.InstancesForServiceStub = nil
	fake.instancesForServiceReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) InstancesItemsForService(serviceName string) []cf.Item {
	fake.instancesItemsForServiceMutex.Lock()
	fake.instancesItemsForServiceArgsForCall = append(fake.instancesItemsForServiceArgsForCall, struct {
		serviceName string
	}{serviceName})
	fake.recordInvocation("InstancesItemsForService", []interface{}{serviceName})
	fake.instancesItemsForServiceMutex.Unlock()
	if fake.InstancesItemsForServiceStub != nil {
		return fake.InstancesItemsForServiceStub(serviceName)
	}
	return fake.instancesItemsForServiceReturns.result1
}

func (fake *FakeLookupInterface) InstancesItemsForServiceCallCount() int {
	fake.instancesItemsForServiceMutex.RLock()
	defer fake.instancesItemsForServiceMutex.RUnlock()
	return len(fake.instancesItemsForServiceArgsForCall)
}

func (fake *FakeLookupInterface) InstancesItemsForServiceArgsForCall(i int) string {
	fake.instancesItemsForServiceMutex.RLock()
	defer fake.instancesItemsForServiceMutex.RUnlock()
	return fake.instancesItemsForServiceArgsForCall[i].serviceName
}

func (fake *FakeLookupInterface) InstancesItemsForServiceReturns(result1 []cf.Item) {
	fake.InstancesItemsForServiceStub = nil
	fake.instancesItemsForServiceReturns = struct {
		result1 []cf.Item
	}{result1}
}

func (fake *FakeLookupInterface) InstanceForInstanceName(serviceInstance string) (instance *cf.Item) {
	fake.instanceForInstanceNameMutex.Lock()
	fake.instanceForInstanceNameArgsForCall = append(fake.instanceForInstanceNameArgsForCall, struct {
		serviceInstance string
	}{serviceInstance})
	fake.recordInvocation("InstanceForInstanceName", []interface{}{serviceInstance})
	fake.instanceForInstanceNameMutex.Unlock()
	if fake.InstanceForInstanceNameStub != nil {
		return fake.InstanceForInstanceNameStub(serviceInstance)
	}
	return fake.instanceForInstanceNameReturns.result1
}

func (fake *FakeLookupInterface) InstanceForInstanceNameCallCount() int {
	fake.instanceForInstanceNameMutex.RLock()
	defer fake.instanceForInstanceNameMutex.RUnlock()
	return len(fake.instanceForInstanceNameArgsForCall)
}

func (fake *FakeLookupInterface) InstanceForInstanceNameArgsForCall(i int) string {
	fake.instanceForInstanceNameMutex.RLock()
	defer fake.instanceForInstanceNameMutex.RUnlock()
	return fake.instanceForInstanceNameArgsForCall[i].serviceInstance
}

func (fake *FakeLookupInterface) InstanceForInstanceNameReturns(result1 *cf.Item) {
	fake.InstanceForInstanceNameStub = nil
	fake.instanceForInstanceNameReturns = struct {
		result1 *cf.Item
	}{result1}
}

func (fake *FakeLookupInterface) AppForName(appName string) (instance *cf.Item) {
	fake.appForNameMutex.Lock()
	fake.appForNameArgsForCall = append(fake.appForNameArgsForCall, struct {
		appName string
	}{appName})
	fake.recordInvocation("AppForName", []interface{}{appName})
	fake.appForNameMutex.Unlock()
	if fake.AppForNameStub != nil {
		return fake.AppForNameStub(appName)
	}
	return fake.appForNameReturns.result1
}

func (fake *FakeLookupInterface) AppForNameCallCount() int {
	fake.appForNameMutex.RLock()
	defer fake.appForNameMutex.RUnlock()
	return len(fake.appForNameArgsForCall)
}

func (fake *FakeLookupInterface) AppForNameArgsForCall(i int) string {
	fake.appForNameMutex.RLock()
	defer fake.appForNameMutex.RUnlock()
	return fake.appForNameArgsForCall[i].appName
}

func (fake *FakeLookupInterface) AppForNameReturns(result1 *cf.Item) {
	fake.AppForNameStub = nil
	fake.appForNameReturns = struct {
		result1 *cf.Item
	}{result1}
}

func (fake *FakeLookupInterface) PredixUaaInstances() []string {
	fake.predixUaaInstancesMutex.Lock()
	fake.predixUaaInstancesArgsForCall = append(fake.predixUaaInstancesArgsForCall, struct{}{})
	fake.recordInvocation("PredixUaaInstances", []interface{}{})
	fake.predixUaaInstancesMutex.Unlock()
	if fake.PredixUaaInstancesStub != nil {
		return fake.PredixUaaInstancesStub()
	}
	return fake.predixUaaInstancesReturns.result1
}

func (fake *FakeLookupInterface) PredixUaaInstancesCallCount() int {
	fake.predixUaaInstancesMutex.RLock()
	defer fake.predixUaaInstancesMutex.RUnlock()
	return len(fake.predixUaaInstancesArgsForCall)
}

func (fake *FakeLookupInterface) PredixUaaInstancesReturns(result1 []string) {
	fake.PredixUaaInstancesStub = nil
	fake.predixUaaInstancesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) PredixAssetInstances() []string {
	fake.predixAssetInstancesMutex.Lock()
	fake.predixAssetInstancesArgsForCall = append(fake.predixAssetInstancesArgsForCall, struct{}{})
	fake.recordInvocation("PredixAssetInstances", []interface{}{})
	fake.predixAssetInstancesMutex.Unlock()
	if fake.PredixAssetInstancesStub != nil {
		return fake.PredixAssetInstancesStub()
	}
	return fake.predixAssetInstancesReturns.result1
}

func (fake *FakeLookupInterface) PredixAssetInstancesCallCount() int {
	fake.predixAssetInstancesMutex.RLock()
	defer fake.predixAssetInstancesMutex.RUnlock()
	return len(fake.predixAssetInstancesArgsForCall)
}

func (fake *FakeLookupInterface) PredixAssetInstancesReturns(result1 []string) {
	fake.PredixAssetInstancesStub = nil
	fake.predixAssetInstancesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) PredixTimeseriesInstances() []string {
	fake.predixTimeseriesInstancesMutex.Lock()
	fake.predixTimeseriesInstancesArgsForCall = append(fake.predixTimeseriesInstancesArgsForCall, struct{}{})
	fake.recordInvocation("PredixTimeseriesInstances", []interface{}{})
	fake.predixTimeseriesInstancesMutex.Unlock()
	if fake.PredixTimeseriesInstancesStub != nil {
		return fake.PredixTimeseriesInstancesStub()
	}
	return fake.predixTimeseriesInstancesReturns.result1
}

func (fake *FakeLookupInterface) PredixTimeseriesInstancesCallCount() int {
	fake.predixTimeseriesInstancesMutex.RLock()
	defer fake.predixTimeseriesInstancesMutex.RUnlock()
	return len(fake.predixTimeseriesInstancesArgsForCall)
}

func (fake *FakeLookupInterface) PredixTimeseriesInstancesReturns(result1 []string) {
	fake.PredixTimeseriesInstancesStub = nil
	fake.predixTimeseriesInstancesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) PredixAnalyticsCatalogInstances() []string {
	fake.predixAnalyticsCatalogInstancesMutex.Lock()
	fake.predixAnalyticsCatalogInstancesArgsForCall = append(fake.predixAnalyticsCatalogInstancesArgsForCall, struct{}{})
	fake.recordInvocation("PredixAnalyticsCatalogInstances", []interface{}{})
	fake.predixAnalyticsCatalogInstancesMutex.Unlock()
	if fake.PredixAnalyticsCatalogInstancesStub != nil {
		return fake.PredixAnalyticsCatalogInstancesStub()
	}
	return fake.predixAnalyticsCatalogInstancesReturns.result1
}

func (fake *FakeLookupInterface) PredixAnalyticsCatalogInstancesCallCount() int {
	fake.predixAnalyticsCatalogInstancesMutex.RLock()
	defer fake.predixAnalyticsCatalogInstancesMutex.RUnlock()
	return len(fake.predixAnalyticsCatalogInstancesArgsForCall)
}

func (fake *FakeLookupInterface) PredixAnalyticsCatalogInstancesReturns(result1 []string) {
	fake.PredixAnalyticsCatalogInstancesStub = nil
	fake.predixAnalyticsCatalogInstancesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) PredixUaaInstanceItem(instanceName string) *cf.Item {
	fake.predixUaaInstanceItemMutex.Lock()
	fake.predixUaaInstanceItemArgsForCall = append(fake.predixUaaInstanceItemArgsForCall, struct {
		instanceName string
	}{instanceName})
	fake.recordInvocation("PredixUaaInstanceItem", []interface{}{instanceName})
	fake.predixUaaInstanceItemMutex.Unlock()
	if fake.PredixUaaInstanceItemStub != nil {
		return fake.PredixUaaInstanceItemStub(instanceName)
	}
	return fake.predixUaaInstanceItemReturns.result1
}

func (fake *FakeLookupInterface) PredixUaaInstanceItemCallCount() int {
	fake.predixUaaInstanceItemMutex.RLock()
	defer fake.predixUaaInstanceItemMutex.RUnlock()
	return len(fake.predixUaaInstanceItemArgsForCall)
}

func (fake *FakeLookupInterface) PredixUaaInstanceItemArgsForCall(i int) string {
	fake.predixUaaInstanceItemMutex.RLock()
	defer fake.predixUaaInstanceItemMutex.RUnlock()
	return fake.predixUaaInstanceItemArgsForCall[i].instanceName
}

func (fake *FakeLookupInterface) PredixUaaInstanceItemReturns(result1 *cf.Item) {
	fake.PredixUaaInstanceItemStub = nil
	fake.predixUaaInstanceItemReturns = struct {
		result1 *cf.Item
	}{result1}
}

func (fake *FakeLookupInterface) ItemNames(path string, cache cf.CacheType) []string {
	fake.itemNamesMutex.Lock()
	fake.itemNamesArgsForCall = append(fake.itemNamesArgsForCall, struct {
		path  string
		cache cf.CacheType
	}{path, cache})
	fake.recordInvocation("ItemNames", []interface{}{path, cache})
	fake.itemNamesMutex.Unlock()
	if fake.ItemNamesStub != nil {
		return fake.ItemNamesStub(path, cache)
	}
	return fake.itemNamesReturns.result1
}

func (fake *FakeLookupInterface) ItemNamesCallCount() int {
	fake.itemNamesMutex.RLock()
	defer fake.itemNamesMutex.RUnlock()
	return len(fake.itemNamesArgsForCall)
}

func (fake *FakeLookupInterface) ItemNamesArgsForCall(i int) (string, cf.CacheType) {
	fake.itemNamesMutex.RLock()
	defer fake.itemNamesMutex.RUnlock()
	return fake.itemNamesArgsForCall[i].path, fake.itemNamesArgsForCall[i].cache
}

func (fake *FakeLookupInterface) ItemNamesReturns(result1 []string) {
	fake.ItemNamesStub = nil
	fake.itemNamesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) ItemNamesForOrg(path string, cache cf.CacheType, org string) []string {
	fake.itemNamesForOrgMutex.Lock()
	fake.itemNamesForOrgArgsForCall = append(fake.itemNamesForOrgArgsForCall, struct {
		path  string
		cache cf.CacheType
		org   string
	}{path, cache, org})
	fake.recordInvocation("ItemNamesForOrg", []interface{}{path, cache, org})
	fake.itemNamesForOrgMutex.Unlock()
	if fake.ItemNamesForOrgStub != nil {
		return fake.ItemNamesForOrgStub(path, cache, org)
	}
	return fake.itemNamesForOrgReturns.result1
}

func (fake *FakeLookupInterface) ItemNamesForOrgCallCount() int {
	fake.itemNamesForOrgMutex.RLock()
	defer fake.itemNamesForOrgMutex.RUnlock()
	return len(fake.itemNamesForOrgArgsForCall)
}

func (fake *FakeLookupInterface) ItemNamesForOrgArgsForCall(i int) (string, cf.CacheType, string) {
	fake.itemNamesForOrgMutex.RLock()
	defer fake.itemNamesForOrgMutex.RUnlock()
	return fake.itemNamesForOrgArgsForCall[i].path, fake.itemNamesForOrgArgsForCall[i].cache, fake.itemNamesForOrgArgsForCall[i].org
}

func (fake *FakeLookupInterface) ItemNamesForOrgReturns(result1 []string) {
	fake.ItemNamesForOrgStub = nil
	fake.itemNamesForOrgReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) Items(path string, cache cf.CacheType) []cf.Item {
	fake.itemsMutex.Lock()
	fake.itemsArgsForCall = append(fake.itemsArgsForCall, struct {
		path  string
		cache cf.CacheType
	}{path, cache})
	fake.recordInvocation("Items", []interface{}{path, cache})
	fake.itemsMutex.Unlock()
	if fake.ItemsStub != nil {
		return fake.ItemsStub(path, cache)
	}
	return fake.itemsReturns.result1
}

func (fake *FakeLookupInterface) ItemsCallCount() int {
	fake.itemsMutex.RLock()
	defer fake.itemsMutex.RUnlock()
	return len(fake.itemsArgsForCall)
}

func (fake *FakeLookupInterface) ItemsArgsForCall(i int) (string, cf.CacheType) {
	fake.itemsMutex.RLock()
	defer fake.itemsMutex.RUnlock()
	return fake.itemsArgsForCall[i].path, fake.itemsArgsForCall[i].cache
}

func (fake *FakeLookupInterface) ItemsReturns(result1 []cf.Item) {
	fake.ItemsStub = nil
	fake.itemsReturns = struct {
		result1 []cf.Item
	}{result1}
}

func (fake *FakeLookupInterface) ItemsForOrg(path string, cache cf.CacheType, org string) []cf.Item {
	fake.itemsForOrgMutex.Lock()
	fake.itemsForOrgArgsForCall = append(fake.itemsForOrgArgsForCall, struct {
		path  string
		cache cf.CacheType
		org   string
	}{path, cache, org})
	fake.recordInvocation("ItemsForOrg", []interface{}{path, cache, org})
	fake.itemsForOrgMutex.Unlock()
	if fake.ItemsForOrgStub != nil {
		return fake.ItemsForOrgStub(path, cache, org)
	}
	return fake.itemsForOrgReturns.result1
}

func (fake *FakeLookupInterface) ItemsForOrgCallCount() int {
	fake.itemsForOrgMutex.RLock()
	defer fake.itemsForOrgMutex.RUnlock()
	return len(fake.itemsForOrgArgsForCall)
}

func (fake *FakeLookupInterface) ItemsForOrgArgsForCall(i int) (string, cf.CacheType, string) {
	fake.itemsForOrgMutex.RLock()
	defer fake.itemsForOrgMutex.RUnlock()
	return fake.itemsForOrgArgsForCall[i].path, fake.itemsForOrgArgsForCall[i].cache, fake.itemsForOrgArgsForCall[i].org
}

func (fake *FakeLookupInterface) ItemsForOrgReturns(result1 []cf.Item) {
	fake.ItemsForOrgStub = nil
	fake.itemsForOrgReturns = struct {
		result1 []cf.Item
	}{result1}
}

func (fake *FakeLookupInterface) NameFromItems(cfItems []cf.Item) (items []string) {
	var cfItemsCopy []cf.Item
	if cfItems != nil {
		cfItemsCopy = make([]cf.Item, len(cfItems))
		copy(cfItemsCopy, cfItems)
	}
	fake.nameFromItemsMutex.Lock()
	fake.nameFromItemsArgsForCall = append(fake.nameFromItemsArgsForCall, struct {
		cfItems []cf.Item
	}{cfItemsCopy})
	fake.recordInvocation("NameFromItems", []interface{}{cfItemsCopy})
	fake.nameFromItemsMutex.Unlock()
	if fake.NameFromItemsStub != nil {
		return fake.NameFromItemsStub(cfItems)
	}
	return fake.nameFromItemsReturns.result1
}

func (fake *FakeLookupInterface) NameFromItemsCallCount() int {
	fake.nameFromItemsMutex.RLock()
	defer fake.nameFromItemsMutex.RUnlock()
	return len(fake.nameFromItemsArgsForCall)
}

func (fake *FakeLookupInterface) NameFromItemsArgsForCall(i int) []cf.Item {
	fake.nameFromItemsMutex.RLock()
	defer fake.nameFromItemsMutex.RUnlock()
	return fake.nameFromItemsArgsForCall[i].cfItems
}

func (fake *FakeLookupInterface) NameFromItemsReturns(result1 []string) {
	fake.NameFromItemsStub = nil
	fake.nameFromItemsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeLookupInterface) InCache(cache cf.CacheType) (items []cf.Item) {
	fake.inCacheMutex.Lock()
	fake.inCacheArgsForCall = append(fake.inCacheArgsForCall, struct {
		cache cf.CacheType
	}{cache})
	fake.recordInvocation("InCache", []interface{}{cache})
	fake.inCacheMutex.Unlock()
	if fake.InCacheStub != nil {
		return fake.InCacheStub(cache)
	}
	return fake.inCacheReturns.result1
}

func (fake *FakeLookupInterface) InCacheCallCount() int {
	fake.inCacheMutex.RLock()
	defer fake.inCacheMutex.RUnlock()
	return len(fake.inCacheArgsForCall)
}

func (fake *FakeLookupInterface) InCacheArgsForCall(i int) cf.CacheType {
	fake.inCacheMutex.RLock()
	defer fake.inCacheMutex.RUnlock()
	return fake.inCacheArgsForCall[i].cache
}

func (fake *FakeLookupInterface) InCacheReturns(result1 []cf.Item) {
	fake.InCacheStub = nil
	fake.inCacheReturns = struct {
		result1 []cf.Item
	}{result1}
}

func (fake *FakeLookupInterface) InCacheForOrg(cache cf.CacheType, org string) (items []cf.Item) {
	fake.inCacheForOrgMutex.Lock()
	fake.inCacheForOrgArgsForCall = append(fake.inCacheForOrgArgsForCall, struct {
		cache cf.CacheType
		org   string
	}{cache, org})
	fake.recordInvocation("InCacheForOrg", []interface{}{cache, org})
	fake.inCacheForOrgMutex.Unlock()
	if fake.InCacheForOrgStub != nil {
		return fake.InCacheForOrgStub(cache, org)
	}
	return fake.inCacheForOrgReturns.result1
}

func (fake *FakeLookupInterface) InCacheForOrgCallCount() int {
	fake.inCacheForOrgMutex.RLock()
	defer fake.inCacheForOrgMutex.RUnlock()
	return len(fake.inCacheForOrgArgsForCall)
}

func (fake *FakeLookupInterface) InCacheForOrgArgsForCall(i int) (cf.CacheType, string) {
	fake.inCacheForOrgMutex.RLock()
	defer fake.inCacheForOrgMutex.RUnlock()
	return fake.inCacheForOrgArgsForCall[i].cache, fake.inCacheForOrgArgsForCall[i].org
}

func (fake *FakeLookupInterface) InCacheForOrgReturns(result1 []cf.Item) {
	fake.InCacheForOrgStub = nil
	fake.inCacheForOrgReturns = struct {
		result1 []cf.Item
	}{result1}
}

func (fake *FakeLookupInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.orgsMutex.RLock()
	defer fake.orgsMutex.RUnlock()
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	fake.stacksMutex.RLock()
	defer fake.stacksMutex.RUnlock()
	fake.marketplaceServicesMutex.RLock()
	defer fake.marketplaceServicesMutex.RUnlock()
	fake.marketplaceServicePlansMutex.RLock()
	defer fake.marketplaceServicePlansMutex.RUnlock()
	fake.serviceInstancesMutex.RLock()
	defer fake.serviceInstancesMutex.RUnlock()
	fake.appsMutex.RLock()
	defer fake.appsMutex.RUnlock()
	fake.marketplaceServicePlansItemsMutex.RLock()
	defer fake.marketplaceServicePlansItemsMutex.RUnlock()
	fake.marketplaceServicePlanItemMutex.RLock()
	defer fake.marketplaceServicePlanItemMutex.RUnlock()
	fake.instancesForServiceMutex.RLock()
	defer fake.instancesForServiceMutex.RUnlock()
	fake.instancesItemsForServiceMutex.RLock()
	defer fake.instancesItemsForServiceMutex.RUnlock()
	fake.instanceForInstanceNameMutex.RLock()
	defer fake.instanceForInstanceNameMutex.RUnlock()
	fake.appForNameMutex.RLock()
	defer fake.appForNameMutex.RUnlock()
	fake.predixUaaInstancesMutex.RLock()
	defer fake.predixUaaInstancesMutex.RUnlock()
	fake.predixAssetInstancesMutex.RLock()
	defer fake.predixAssetInstancesMutex.RUnlock()
	fake.predixTimeseriesInstancesMutex.RLock()
	defer fake.predixTimeseriesInstancesMutex.RUnlock()
	fake.predixAnalyticsCatalogInstancesMutex.RLock()
	defer fake.predixAnalyticsCatalogInstancesMutex.RUnlock()
	fake.predixUaaInstanceItemMutex.RLock()
	defer fake.predixUaaInstanceItemMutex.RUnlock()
	fake.itemNamesMutex.RLock()
	defer fake.itemNamesMutex.RUnlock()
	fake.itemNamesForOrgMutex.RLock()
	defer fake.itemNamesForOrgMutex.RUnlock()
	fake.itemsMutex.RLock()
	defer fake.itemsMutex.RUnlock()
	fake.itemsForOrgMutex.RLock()
	defer fake.itemsForOrgMutex.RUnlock()
	fake.nameFromItemsMutex.RLock()
	defer fake.nameFromItemsMutex.RUnlock()
	fake.inCacheMutex.RLock()
	defer fake.inCacheMutex.RUnlock()
	fake.inCacheForOrgMutex.RLock()
	defer fake.inCacheForOrgMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLookupInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf.LookupInterface = new(FakeLookupInterface)
