// This file was generated by counterfeiter
package cffakes

import (
	"sync"

	"github.build.ge.com/adoption/predix-cli/cli/cf"
)

type FakeCurlInterface struct {
	GetItemFromResourceStub        func(resource *cf.CurlResource) (item *cf.Item)
	getItemFromResourceMutex       sync.RWMutex
	getItemFromResourceArgsForCall []struct {
		resource *cf.CurlResource
	}
	getItemFromResourceReturns struct {
		result1 *cf.Item
	}
	GetItemsStub        func(path string) (items []cf.Item)
	getItemsMutex       sync.RWMutex
	getItemsArgsForCall []struct {
		path string
	}
	getItemsReturns struct {
		result1 []cf.Item
	}
	GetResourcesStub        func(path string) (resources []cf.CurlResource)
	getResourcesMutex       sync.RWMutex
	getResourcesArgsForCall []struct {
		path string
	}
	getResourcesReturns struct {
		result1 []cf.CurlResource
	}
	GetResourceStub        func(path string) (resource *cf.CurlResource)
	getResourceMutex       sync.RWMutex
	getResourceArgsForCall []struct {
		path string
	}
	getResourceReturns struct {
		result1 *cf.CurlResource
	}
	GetItemStub        func(path string) (item *cf.Item)
	getItemMutex       sync.RWMutex
	getItemArgsForCall []struct {
		path string
	}
	getItemReturns struct {
		result1 *cf.Item
	}
	PostItemStub        func(path string, data string) (item *cf.Item, err error)
	postItemMutex       sync.RWMutex
	postItemArgsForCall []struct {
		path string
		data string
	}
	postItemReturns struct {
		result1 *cf.Item
		result2 error
	}
	PostResourceStub        func(path string, data string) (r *cf.CurlResource, err error)
	postResourceMutex       sync.RWMutex
	postResourceArgsForCall []struct {
		path string
		data string
	}
	postResourceReturns struct {
		result1 *cf.CurlResource
		result2 error
	}
	DeleteStub        func(path string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		path string
	}
	deleteReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCurlInterface) GetItemFromResource(resource *cf.CurlResource) (item *cf.Item) {
	fake.getItemFromResourceMutex.Lock()
	fake.getItemFromResourceArgsForCall = append(fake.getItemFromResourceArgsForCall, struct {
		resource *cf.CurlResource
	}{resource})
	fake.recordInvocation("GetItemFromResource", []interface{}{resource})
	fake.getItemFromResourceMutex.Unlock()
	if fake.GetItemFromResourceStub != nil {
		return fake.GetItemFromResourceStub(resource)
	} else {
		return fake.getItemFromResourceReturns.result1
	}
}

func (fake *FakeCurlInterface) GetItemFromResourceCallCount() int {
	fake.getItemFromResourceMutex.RLock()
	defer fake.getItemFromResourceMutex.RUnlock()
	return len(fake.getItemFromResourceArgsForCall)
}

func (fake *FakeCurlInterface) GetItemFromResourceArgsForCall(i int) *cf.CurlResource {
	fake.getItemFromResourceMutex.RLock()
	defer fake.getItemFromResourceMutex.RUnlock()
	return fake.getItemFromResourceArgsForCall[i].resource
}

func (fake *FakeCurlInterface) GetItemFromResourceReturns(result1 *cf.Item) {
	fake.GetItemFromResourceStub = nil
	fake.getItemFromResourceReturns = struct {
		result1 *cf.Item
	}{result1}
}

func (fake *FakeCurlInterface) GetItems(path string) (items []cf.Item) {
	fake.getItemsMutex.Lock()
	fake.getItemsArgsForCall = append(fake.getItemsArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("GetItems", []interface{}{path})
	fake.getItemsMutex.Unlock()
	if fake.GetItemsStub != nil {
		return fake.GetItemsStub(path)
	} else {
		return fake.getItemsReturns.result1
	}
}

func (fake *FakeCurlInterface) GetItemsCallCount() int {
	fake.getItemsMutex.RLock()
	defer fake.getItemsMutex.RUnlock()
	return len(fake.getItemsArgsForCall)
}

func (fake *FakeCurlInterface) GetItemsArgsForCall(i int) string {
	fake.getItemsMutex.RLock()
	defer fake.getItemsMutex.RUnlock()
	return fake.getItemsArgsForCall[i].path
}

func (fake *FakeCurlInterface) GetItemsReturns(result1 []cf.Item) {
	fake.GetItemsStub = nil
	fake.getItemsReturns = struct {
		result1 []cf.Item
	}{result1}
}

func (fake *FakeCurlInterface) GetResources(path string) (resources []cf.CurlResource) {
	fake.getResourcesMutex.Lock()
	fake.getResourcesArgsForCall = append(fake.getResourcesArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("GetResources", []interface{}{path})
	fake.getResourcesMutex.Unlock()
	if fake.GetResourcesStub != nil {
		return fake.GetResourcesStub(path)
	} else {
		return fake.getResourcesReturns.result1
	}
}

func (fake *FakeCurlInterface) GetResourcesCallCount() int {
	fake.getResourcesMutex.RLock()
	defer fake.getResourcesMutex.RUnlock()
	return len(fake.getResourcesArgsForCall)
}

func (fake *FakeCurlInterface) GetResourcesArgsForCall(i int) string {
	fake.getResourcesMutex.RLock()
	defer fake.getResourcesMutex.RUnlock()
	return fake.getResourcesArgsForCall[i].path
}

func (fake *FakeCurlInterface) GetResourcesReturns(result1 []cf.CurlResource) {
	fake.GetResourcesStub = nil
	fake.getResourcesReturns = struct {
		result1 []cf.CurlResource
	}{result1}
}

func (fake *FakeCurlInterface) GetResource(path string) (resource *cf.CurlResource) {
	fake.getResourceMutex.Lock()
	fake.getResourceArgsForCall = append(fake.getResourceArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("GetResource", []interface{}{path})
	fake.getResourceMutex.Unlock()
	if fake.GetResourceStub != nil {
		return fake.GetResourceStub(path)
	} else {
		return fake.getResourceReturns.result1
	}
}

func (fake *FakeCurlInterface) GetResourceCallCount() int {
	fake.getResourceMutex.RLock()
	defer fake.getResourceMutex.RUnlock()
	return len(fake.getResourceArgsForCall)
}

func (fake *FakeCurlInterface) GetResourceArgsForCall(i int) string {
	fake.getResourceMutex.RLock()
	defer fake.getResourceMutex.RUnlock()
	return fake.getResourceArgsForCall[i].path
}

func (fake *FakeCurlInterface) GetResourceReturns(result1 *cf.CurlResource) {
	fake.GetResourceStub = nil
	fake.getResourceReturns = struct {
		result1 *cf.CurlResource
	}{result1}
}

func (fake *FakeCurlInterface) GetItem(path string) (item *cf.Item) {
	fake.getItemMutex.Lock()
	fake.getItemArgsForCall = append(fake.getItemArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("GetItem", []interface{}{path})
	fake.getItemMutex.Unlock()
	if fake.GetItemStub != nil {
		return fake.GetItemStub(path)
	} else {
		return fake.getItemReturns.result1
	}
}

func (fake *FakeCurlInterface) GetItemCallCount() int {
	fake.getItemMutex.RLock()
	defer fake.getItemMutex.RUnlock()
	return len(fake.getItemArgsForCall)
}

func (fake *FakeCurlInterface) GetItemArgsForCall(i int) string {
	fake.getItemMutex.RLock()
	defer fake.getItemMutex.RUnlock()
	return fake.getItemArgsForCall[i].path
}

func (fake *FakeCurlInterface) GetItemReturns(result1 *cf.Item) {
	fake.GetItemStub = nil
	fake.getItemReturns = struct {
		result1 *cf.Item
	}{result1}
}

func (fake *FakeCurlInterface) PostItem(path string, data string) (item *cf.Item, err error) {
	fake.postItemMutex.Lock()
	fake.postItemArgsForCall = append(fake.postItemArgsForCall, struct {
		path string
		data string
	}{path, data})
	fake.recordInvocation("PostItem", []interface{}{path, data})
	fake.postItemMutex.Unlock()
	if fake.PostItemStub != nil {
		return fake.PostItemStub(path, data)
	} else {
		return fake.postItemReturns.result1, fake.postItemReturns.result2
	}
}

func (fake *FakeCurlInterface) PostItemCallCount() int {
	fake.postItemMutex.RLock()
	defer fake.postItemMutex.RUnlock()
	return len(fake.postItemArgsForCall)
}

func (fake *FakeCurlInterface) PostItemArgsForCall(i int) (string, string) {
	fake.postItemMutex.RLock()
	defer fake.postItemMutex.RUnlock()
	return fake.postItemArgsForCall[i].path, fake.postItemArgsForCall[i].data
}

func (fake *FakeCurlInterface) PostItemReturns(result1 *cf.Item, result2 error) {
	fake.PostItemStub = nil
	fake.postItemReturns = struct {
		result1 *cf.Item
		result2 error
	}{result1, result2}
}

func (fake *FakeCurlInterface) PostResource(path string, data string) (r *cf.CurlResource, err error) {
	fake.postResourceMutex.Lock()
	fake.postResourceArgsForCall = append(fake.postResourceArgsForCall, struct {
		path string
		data string
	}{path, data})
	fake.recordInvocation("PostResource", []interface{}{path, data})
	fake.postResourceMutex.Unlock()
	if fake.PostResourceStub != nil {
		return fake.PostResourceStub(path, data)
	} else {
		return fake.postResourceReturns.result1, fake.postResourceReturns.result2
	}
}

func (fake *FakeCurlInterface) PostResourceCallCount() int {
	fake.postResourceMutex.RLock()
	defer fake.postResourceMutex.RUnlock()
	return len(fake.postResourceArgsForCall)
}

func (fake *FakeCurlInterface) PostResourceArgsForCall(i int) (string, string) {
	fake.postResourceMutex.RLock()
	defer fake.postResourceMutex.RUnlock()
	return fake.postResourceArgsForCall[i].path, fake.postResourceArgsForCall[i].data
}

func (fake *FakeCurlInterface) PostResourceReturns(result1 *cf.CurlResource, result2 error) {
	fake.PostResourceStub = nil
	fake.postResourceReturns = struct {
		result1 *cf.CurlResource
		result2 error
	}{result1, result2}
}

func (fake *FakeCurlInterface) Delete(path string) error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("Delete", []interface{}{path})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(path)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeCurlInterface) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeCurlInterface) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].path
}

func (fake *FakeCurlInterface) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCurlInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getItemFromResourceMutex.RLock()
	defer fake.getItemFromResourceMutex.RUnlock()
	fake.getItemsMutex.RLock()
	defer fake.getItemsMutex.RUnlock()
	fake.getResourcesMutex.RLock()
	defer fake.getResourcesMutex.RUnlock()
	fake.getResourceMutex.RLock()
	defer fake.getResourceMutex.RUnlock()
	fake.getItemMutex.RLock()
	defer fake.getItemMutex.RUnlock()
	fake.postItemMutex.RLock()
	defer fake.postItemMutex.RUnlock()
	fake.postResourceMutex.RLock()
	defer fake.postResourceMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCurlInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf.CurlInterface = new(FakeCurlInterface)
