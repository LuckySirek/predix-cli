// This file was generated by counterfeiter
package helpersfakes

import (
	"sync"

	"github.build.ge.com/adoption/predix-cli/cli/cf"
	"github.build.ge.com/adoption/predix-cli/cli/commands/helpers"
	"github.com/urfave/cli"
)

type FakeUaaInterface struct {
	FetchInstanceStub        func(instanceName string) (instance *cf.Item, serviceInfo map[string]interface{})
	fetchInstanceMutex       sync.RWMutex
	fetchInstanceArgsForCall []struct {
		instanceName string
	}
	fetchInstanceReturns struct {
		result1 *cf.Item
		result2 map[string]interface{}
	}
	AskForAdminClientSecretStub        func(c *cli.Context) string
	askForAdminClientSecretMutex       sync.RWMutex
	askForAdminClientSecretArgsForCall []struct {
		c *cli.Context
	}
	askForAdminClientSecretReturns struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUaaInterface) FetchInstance(instanceName string) (instance *cf.Item, serviceInfo map[string]interface{}) {
	fake.fetchInstanceMutex.Lock()
	fake.fetchInstanceArgsForCall = append(fake.fetchInstanceArgsForCall, struct {
		instanceName string
	}{instanceName})
	fake.recordInvocation("FetchInstance", []interface{}{instanceName})
	fake.fetchInstanceMutex.Unlock()
	if fake.FetchInstanceStub != nil {
		return fake.FetchInstanceStub(instanceName)
	} else {
		return fake.fetchInstanceReturns.result1, fake.fetchInstanceReturns.result2
	}
}

func (fake *FakeUaaInterface) FetchInstanceCallCount() int {
	fake.fetchInstanceMutex.RLock()
	defer fake.fetchInstanceMutex.RUnlock()
	return len(fake.fetchInstanceArgsForCall)
}

func (fake *FakeUaaInterface) FetchInstanceArgsForCall(i int) string {
	fake.fetchInstanceMutex.RLock()
	defer fake.fetchInstanceMutex.RUnlock()
	return fake.fetchInstanceArgsForCall[i].instanceName
}

func (fake *FakeUaaInterface) FetchInstanceReturns(result1 *cf.Item, result2 map[string]interface{}) {
	fake.FetchInstanceStub = nil
	fake.fetchInstanceReturns = struct {
		result1 *cf.Item
		result2 map[string]interface{}
	}{result1, result2}
}

func (fake *FakeUaaInterface) AskForAdminClientSecret(c *cli.Context) string {
	fake.askForAdminClientSecretMutex.Lock()
	fake.askForAdminClientSecretArgsForCall = append(fake.askForAdminClientSecretArgsForCall, struct {
		c *cli.Context
	}{c})
	fake.recordInvocation("AskForAdminClientSecret", []interface{}{c})
	fake.askForAdminClientSecretMutex.Unlock()
	if fake.AskForAdminClientSecretStub != nil {
		return fake.AskForAdminClientSecretStub(c)
	} else {
		return fake.askForAdminClientSecretReturns.result1
	}
}

func (fake *FakeUaaInterface) AskForAdminClientSecretCallCount() int {
	fake.askForAdminClientSecretMutex.RLock()
	defer fake.askForAdminClientSecretMutex.RUnlock()
	return len(fake.askForAdminClientSecretArgsForCall)
}

func (fake *FakeUaaInterface) AskForAdminClientSecretArgsForCall(i int) *cli.Context {
	fake.askForAdminClientSecretMutex.RLock()
	defer fake.askForAdminClientSecretMutex.RUnlock()
	return fake.askForAdminClientSecretArgsForCall[i].c
}

func (fake *FakeUaaInterface) AskForAdminClientSecretReturns(result1 string) {
	fake.AskForAdminClientSecretStub = nil
	fake.askForAdminClientSecretReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeUaaInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchInstanceMutex.RLock()
	defer fake.fetchInstanceMutex.RUnlock()
	fake.askForAdminClientSecretMutex.RLock()
	defer fake.askForAdminClientSecretMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeUaaInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ helpers.UaaInterface = new(FakeUaaInterface)
