// This file was generated by counterfeiter
package helpersfakes

import (
	"sync"

	"github.build.ge.com/adoption/predix-cli/cli/cf"
	"github.build.ge.com/adoption/predix-cli/cli/commands/helpers"
)

type FakeServiceInfoInterface struct {
	FetchForStub        func(serviceInstance *cf.Item) map[string]interface{}
	fetchForMutex       sync.RWMutex
	fetchForArgsForCall []struct {
		serviceInstance *cf.Item
	}
	fetchForReturns struct {
		result1 map[string]interface{}
	}
	FetchForAppAndServiceInstanceStub        func(appInstance *cf.Item, serviceInstance *cf.Item) map[string]interface{}
	fetchForAppAndServiceInstanceMutex       sync.RWMutex
	fetchForAppAndServiceInstanceArgsForCall []struct {
		appInstance     *cf.Item
		serviceInstance *cf.Item
	}
	fetchForAppAndServiceInstanceReturns struct {
		result1 map[string]interface{}
	}
	PrintForStub        func(serviceInstance *cf.Item)
	printForMutex       sync.RWMutex
	printForArgsForCall []struct {
		serviceInstance *cf.Item
	}
	PrintForAppAndServiceInstanceStub        func(appInstance *cf.Item, serviceInstance *cf.Item)
	printForAppAndServiceInstanceMutex       sync.RWMutex
	printForAppAndServiceInstanceArgsForCall []struct {
		appInstance     *cf.Item
		serviceInstance *cf.Item
	}
	ResolveJSONPathStub        func(obj interface{}, path string) interface{}
	resolveJSONPathMutex       sync.RWMutex
	resolveJSONPathArgsForCall []struct {
		obj  interface{}
		path string
	}
	resolveJSONPathReturns struct {
		result1 interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceInfoInterface) FetchFor(serviceInstance *cf.Item) map[string]interface{} {
	fake.fetchForMutex.Lock()
	fake.fetchForArgsForCall = append(fake.fetchForArgsForCall, struct {
		serviceInstance *cf.Item
	}{serviceInstance})
	fake.recordInvocation("FetchFor", []interface{}{serviceInstance})
	fake.fetchForMutex.Unlock()
	if fake.FetchForStub != nil {
		return fake.FetchForStub(serviceInstance)
	}
	return fake.fetchForReturns.result1
}

func (fake *FakeServiceInfoInterface) FetchForCallCount() int {
	fake.fetchForMutex.RLock()
	defer fake.fetchForMutex.RUnlock()
	return len(fake.fetchForArgsForCall)
}

func (fake *FakeServiceInfoInterface) FetchForArgsForCall(i int) *cf.Item {
	fake.fetchForMutex.RLock()
	defer fake.fetchForMutex.RUnlock()
	return fake.fetchForArgsForCall[i].serviceInstance
}

func (fake *FakeServiceInfoInterface) FetchForReturns(result1 map[string]interface{}) {
	fake.FetchForStub = nil
	fake.fetchForReturns = struct {
		result1 map[string]interface{}
	}{result1}
}

func (fake *FakeServiceInfoInterface) FetchForAppAndServiceInstance(appInstance *cf.Item, serviceInstance *cf.Item) map[string]interface{} {
	fake.fetchForAppAndServiceInstanceMutex.Lock()
	fake.fetchForAppAndServiceInstanceArgsForCall = append(fake.fetchForAppAndServiceInstanceArgsForCall, struct {
		appInstance     *cf.Item
		serviceInstance *cf.Item
	}{appInstance, serviceInstance})
	fake.recordInvocation("FetchForAppAndServiceInstance", []interface{}{appInstance, serviceInstance})
	fake.fetchForAppAndServiceInstanceMutex.Unlock()
	if fake.FetchForAppAndServiceInstanceStub != nil {
		return fake.FetchForAppAndServiceInstanceStub(appInstance, serviceInstance)
	}
	return fake.fetchForAppAndServiceInstanceReturns.result1
}

func (fake *FakeServiceInfoInterface) FetchForAppAndServiceInstanceCallCount() int {
	fake.fetchForAppAndServiceInstanceMutex.RLock()
	defer fake.fetchForAppAndServiceInstanceMutex.RUnlock()
	return len(fake.fetchForAppAndServiceInstanceArgsForCall)
}

func (fake *FakeServiceInfoInterface) FetchForAppAndServiceInstanceArgsForCall(i int) (*cf.Item, *cf.Item) {
	fake.fetchForAppAndServiceInstanceMutex.RLock()
	defer fake.fetchForAppAndServiceInstanceMutex.RUnlock()
	return fake.fetchForAppAndServiceInstanceArgsForCall[i].appInstance, fake.fetchForAppAndServiceInstanceArgsForCall[i].serviceInstance
}

func (fake *FakeServiceInfoInterface) FetchForAppAndServiceInstanceReturns(result1 map[string]interface{}) {
	fake.FetchForAppAndServiceInstanceStub = nil
	fake.fetchForAppAndServiceInstanceReturns = struct {
		result1 map[string]interface{}
	}{result1}
}

func (fake *FakeServiceInfoInterface) PrintFor(serviceInstance *cf.Item) {
	fake.printForMutex.Lock()
	fake.printForArgsForCall = append(fake.printForArgsForCall, struct {
		serviceInstance *cf.Item
	}{serviceInstance})
	fake.recordInvocation("PrintFor", []interface{}{serviceInstance})
	fake.printForMutex.Unlock()
	if fake.PrintForStub != nil {
		fake.PrintForStub(serviceInstance)
	}
}

func (fake *FakeServiceInfoInterface) PrintForCallCount() int {
	fake.printForMutex.RLock()
	defer fake.printForMutex.RUnlock()
	return len(fake.printForArgsForCall)
}

func (fake *FakeServiceInfoInterface) PrintForArgsForCall(i int) *cf.Item {
	fake.printForMutex.RLock()
	defer fake.printForMutex.RUnlock()
	return fake.printForArgsForCall[i].serviceInstance
}

func (fake *FakeServiceInfoInterface) PrintForAppAndServiceInstance(appInstance *cf.Item, serviceInstance *cf.Item) {
	fake.printForAppAndServiceInstanceMutex.Lock()
	fake.printForAppAndServiceInstanceArgsForCall = append(fake.printForAppAndServiceInstanceArgsForCall, struct {
		appInstance     *cf.Item
		serviceInstance *cf.Item
	}{appInstance, serviceInstance})
	fake.recordInvocation("PrintForAppAndServiceInstance", []interface{}{appInstance, serviceInstance})
	fake.printForAppAndServiceInstanceMutex.Unlock()
	if fake.PrintForAppAndServiceInstanceStub != nil {
		fake.PrintForAppAndServiceInstanceStub(appInstance, serviceInstance)
	}
}

func (fake *FakeServiceInfoInterface) PrintForAppAndServiceInstanceCallCount() int {
	fake.printForAppAndServiceInstanceMutex.RLock()
	defer fake.printForAppAndServiceInstanceMutex.RUnlock()
	return len(fake.printForAppAndServiceInstanceArgsForCall)
}

func (fake *FakeServiceInfoInterface) PrintForAppAndServiceInstanceArgsForCall(i int) (*cf.Item, *cf.Item) {
	fake.printForAppAndServiceInstanceMutex.RLock()
	defer fake.printForAppAndServiceInstanceMutex.RUnlock()
	return fake.printForAppAndServiceInstanceArgsForCall[i].appInstance, fake.printForAppAndServiceInstanceArgsForCall[i].serviceInstance
}

func (fake *FakeServiceInfoInterface) ResolveJSONPath(obj interface{}, path string) interface{} {
	fake.resolveJSONPathMutex.Lock()
	fake.resolveJSONPathArgsForCall = append(fake.resolveJSONPathArgsForCall, struct {
		obj  interface{}
		path string
	}{obj, path})
	fake.recordInvocation("ResolveJSONPath", []interface{}{obj, path})
	fake.resolveJSONPathMutex.Unlock()
	if fake.ResolveJSONPathStub != nil {
		return fake.ResolveJSONPathStub(obj, path)
	}
	return fake.resolveJSONPathReturns.result1
}

func (fake *FakeServiceInfoInterface) ResolveJSONPathCallCount() int {
	fake.resolveJSONPathMutex.RLock()
	defer fake.resolveJSONPathMutex.RUnlock()
	return len(fake.resolveJSONPathArgsForCall)
}

func (fake *FakeServiceInfoInterface) ResolveJSONPathArgsForCall(i int) (interface{}, string) {
	fake.resolveJSONPathMutex.RLock()
	defer fake.resolveJSONPathMutex.RUnlock()
	return fake.resolveJSONPathArgsForCall[i].obj, fake.resolveJSONPathArgsForCall[i].path
}

func (fake *FakeServiceInfoInterface) ResolveJSONPathReturns(result1 interface{}) {
	fake.ResolveJSONPathStub = nil
	fake.resolveJSONPathReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeServiceInfoInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchForMutex.RLock()
	defer fake.fetchForMutex.RUnlock()
	fake.fetchForAppAndServiceInstanceMutex.RLock()
	defer fake.fetchForAppAndServiceInstanceMutex.RUnlock()
	fake.printForMutex.RLock()
	defer fake.printForMutex.RUnlock()
	fake.printForAppAndServiceInstanceMutex.RLock()
	defer fake.printForAppAndServiceInstanceMutex.RUnlock()
	fake.resolveJSONPathMutex.RLock()
	defer fake.resolveJSONPathMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeServiceInfoInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ helpers.ServiceInfoInterface = new(FakeServiceInfoInterface)
